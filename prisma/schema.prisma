generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  userId             String @map("user_id")
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  phone_number  String?
  image         String?   @map("profile_picture")
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  reviews       Review[]
  votes         VoteReview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("Verification_Token")
}

model Store {
  id              String  @id @default(cuid())
  owner_id        String? 
  owner           User?   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  store_name      String  @unique
  phone_number    String  @unique
  address         String
  average_cost    Int
  longitude       Int
  latitude        Int
  slug            String  @unique
  more_info       String
  reviews         Review[]
  photos          Photo[]
  menus           Menu[]
}

model Review {
  id          String  @id @default(cuid())
  store_id    String
  store       Store   @relation(fields: [store_id], references: [id], onDelete: Cascade)
  user_id     String
  user        User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rating      Int     
  comment     String
  votes       VoteReview[]
}

model VoteReview {
  id        String  @id @default(cuid())
  review_id String 
  review    Review  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user_id   String
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@map("Vote_Review")
}

model Photo {
  store_id  String @id @default(cuid())
  store     Store @relation(fields: [store_id], references: [id], onDelete: Cascade)
  photos    String
}

model Menu {
  id          String  @id @default(cuid())
  store_id    String
  store       Store @relation(fields: [store_id], references: [id], onDelete: Cascade)
  menu_type   String
  list_menus  ListMenu[]
}

model ListMenu {
  id        String  @id @default(cuid())
  menu_id   String
  menu      Menu @relation(fields: [menu_id], references: [id], onDelete: Cascade)
  name      String
  price     Int

  @@map("List_Menu")
}